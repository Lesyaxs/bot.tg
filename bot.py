import asyncio
import logging
import sqlite3
import os
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

API_TOKEN = '7940443179:AAFRX9c0svolP3MAtvjG7Do4Jk9KGZpwvdo'
DATABASE = 'tasks.db'
MEME_DIR = "memes"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton(text="üß† –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è")],
    ],
    resize_keyboard=True
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ---
def init_db():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS tasks (
                        user_id INTEGER,
                        text TEXT,
                        remind_at TEXT
                    )''')
    conn.commit()
    conn.close()

# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=main_keyboard)

@dp.message_handler(lambda msg: msg.text == "üöÄ –ù–∞—á–∞—Ç—å")
async def restart_command(message: types.Message):
    await start_handler(message)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
user_state = {}

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ---
@dp.message_handler(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task(message: types.Message):
    user_state[message.from_user.id] = {'stage': 'awaiting_text'}
    await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")

@dp.message_handler(lambda msg: user_state.get(msg.from_user.id, {}).get('stage') == 'awaiting_text')
async def get_task_text(message: types.Message):
    user_state[message.from_user.id]['text'] = message.text
    user_state[message.from_user.id]['stage'] = 'awaiting_date'
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

@dp.message_handler(lambda msg: user_state.get(msg.from_user.id, {}).get('stage') == 'awaiting_date')
async def get_task_date(message: types.Message):
    try:
        date = datetime.strptime(message.text.strip(), '%d.%m.%Y').date()
        user_state[message.from_user.id]['date'] = date
        user_state[message.from_user.id]['stage'] = 'awaiting_time'
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@dp.message_handler(lambda msg: user_state.get(msg.from_user.id, {}).get('stage') == 'awaiting_time')
async def get_task_time(message: types.Message):
    try:
        time = datetime.strptime(message.text.strip(), '%H:%M').time()
        data = user_state.pop(message.from_user.id)
        remind_at = datetime.combine(data['date'], time).replace(second=0, microsecond=0)

        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO tasks (user_id, text, remind_at) VALUES (?, ?, ?)",
                       (message.from_user.id, data['text'], remind_at.isoformat()))
        conn.commit()
        conn.close()

        await message.answer("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á ---
@dp.message_handler(lambda msg: msg.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def list_tasks(message: types.Message):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT rowid, text, remind_at FROM tasks WHERE user_id=?", (message.from_user.id,))
    tasks = cursor.fetchall()
    conn.close()

    if not tasks:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        response = "–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n"
        for rowid, text, remind_at in tasks:
            remind_time = datetime.fromisoformat(remind_at).strftime('%d.%m.%Y %H:%M')
            response += f"[{rowid}] {text} - {remind_time}\n"
        await message.answer(response)

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ---
@dp.message_handler(lambda msg: msg.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def delete_task(message: types.Message):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT rowid, text FROM tasks WHERE user_id=?", (message.from_user.id,))
    tasks = cursor.fetchall()

    if not tasks:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    response = "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
    for rowid, text in tasks:
        response += f"[{rowid}] {text}\n"
    await message.answer(response)

    user_state[message.from_user.id] = {'stage': 'awaiting_delete'}

@dp.message_handler(lambda msg: user_state.get(msg.from_user.id, {}).get('stage') == 'awaiting_delete')
async def confirm_delete(message: types.Message):
    try:
        task_id = int(message.text.strip())
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM tasks WHERE rowid=? AND user_id=?", (task_id, message.from_user.id))
        conn.commit()
        conn.close()
        user_state.pop(message.from_user.id)
        await message.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=main_keyboard)
    except:
        await message.answer("–û—à–∏–±–∫–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.")

# --- –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è —Å –º–µ–º–æ–º –∏–∑ –ø–∞–ø–∫–∏ ---
@dp.message_handler(lambda msg: msg.text == "üß† –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è")
async def send_quote(message: types.Message):
    quotes = [
    "¬´–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ —Å—Ç–∞—Ç—å —Ç–µ–º, –∫–µ–º —Ç—ã –º–æ–≥ –±—ã –±—ã—Ç—å.¬ª ‚Äî –î–∂–æ—Ä–¥–∂ –≠–ª–∏–æ—Ç",
    "¬´–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ 10% —Ç–æ–≥–æ, —á—Ç–æ —Å —Ç–æ–±–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∏ 90% —Ç–æ–≥–æ, –∫–∞–∫ —Ç—ã –Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä—É–µ—à—å.¬ª",
    "¬´–ë—É–¥—å —Å–æ–±–æ–π. –ü—Ä–æ—á–∏–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.¬ª ‚Äî –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
    "¬´–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ ‚Äî –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å.¬ª ‚Äî –°—Ç–∏–≤ –î–∂–æ–±—Å",
    "¬´–¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Ç–µ–º, –æ —á—ë–º —Ç—ã –¥—É–º–∞–µ—à—å –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏.¬ª ‚Äî –≠—Ä–ª –ù–∞–π—Ç–∏–Ω–≥–µ–π–ª",
    "¬´–°–Ω–∞—á–∞–ª–∞ –æ–Ω–∏ —Ç–µ–±—è –Ω–µ –∑–∞–º–µ—á–∞—é—Ç, –ø–æ—Ç–æ–º —Å–º–µ—é—Ç—Å—è –Ω–∞–¥ —Ç–æ–±–æ–π, –ø–æ—Ç–æ–º –±–æ—Ä—é—Ç—Å—è —Å —Ç–æ–±–æ–π, –∞ –ø–æ—Ç–æ–º —Ç—ã –ø–æ–±–µ–∂–¥–∞–µ—à—å.¬ª ‚Äî –ú–∞—Ö–∞—Ç–º–∞ –ì–∞–Ω–¥–∏",
    "¬´–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å ‚Äî —ç—Ç–æ –Ω–µ –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–±–µ–≥, —ç—Ç–æ –º–Ω–æ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–±–µ–≥–æ–≤ –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º.¬ª ‚Äî –£–æ–ª—Ç–µ—Ä –≠–ª–ª–∏–æ—Ç",
    "¬´–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å, –∏ —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –±–æ–ª—å—à–µ–µ, —á–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å.¬ª",
    "¬´–ö–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ ‚Äî —ç—Ç–æ —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–æ —É–∂–µ –±–æ–ª–µ–µ –º—É–¥—Ä–æ.¬ª ‚Äî –ì–µ–Ω—Ä–∏ –§–æ—Ä–¥",
    "¬´–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö —É—Å–∏–ª–∏–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã—Ö –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å.¬ª ‚Äî –†–æ–±–µ—Ä—Ç –ö–æ–ª–ª—å–µ—Ä",
    "¬´–°—Ç—Ä–∞—Ö ‚Äî —ç—Ç–æ –ª–æ–∂—å, –∫–æ—Ç–æ—Ä—É—é –º—ã –≥–æ–≤–æ—Ä–∏–º —Å–µ–±–µ.¬ª ‚Äî –î–∂–æ–Ω–∞—Ç–∞–Ω –•–∞–π–Ω—Ü",
    "¬´–î–∞–∂–µ —Å–∞–º—ã–π –¥–æ–ª–≥–∏–π –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.¬ª ‚Äî –õ–∞–æ-—Ü–∑—ã",
    "¬´–í–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–≤–µ—Ä—à–∞—é—Ç—Å—è –≤ –∑–æ–Ω–µ –∫–æ–º—Ñ–æ—Ä—Ç–∞.¬ª",
    "¬´–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —Ç—ã –≥–æ—Ç–æ–≤ —Å–¥–∞—Ç—å—Å—è, –æ–±—ã—á–Ω–æ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –ø—Ä–æ—Ä—ã–≤.¬ª",
    "¬´–¢–æ—Ç, –∫—Ç–æ —Ö–æ—á–µ—Ç ‚Äî –∏—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ö—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç ‚Äî –∏—â–µ—Ç –ø—Ä–∏—á–∏–Ω—ã.¬ª",
    "¬´–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω –±—ã—Ç—å –≤–µ–ª–∏–∫–∏–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. –ù–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –≤–µ–ª–∏–∫–∏–º.¬ª",
    "¬´–û—à–∏–±–∫–∏ ‚Äî —ç—Ç–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è.¬ª",
    "¬´–°–∏–ª–∞ –Ω–µ –≤ –ø–æ–±–µ–¥–µ, –∞ –≤ –æ—Ç–∫–∞–∑–µ —Å–¥–∞—Ç—å—Å—è.¬ª",
    "¬´–¢—ã —Å–∞–º –ø–∏—à–µ—à—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é. –°–¥–µ–ª–∞–π –µ—ë –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–π.¬ª",
    "¬´–ï—Å–ª–∏ –Ω–µ —Å–µ–π—á–∞—Å, —Ç–æ –∫–æ–≥–¥–∞?¬ª"
]
    quote = random.choice(quotes)
    await message.answer(f"üí¨ {quote}")

    if os.path.isdir(MEME_DIR):
        memes = [f for f in os.listdir(MEME_DIR) if f.endswith(('.jpg', '.png', '.jpeg'))]
        if memes:
            meme_file = random.choice(memes)
            with open(os.path.join(MEME_DIR, meme_file), 'rb') as photo:
                await bot.send_photo(message.chat.id, photo)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def check_reminders():
    while True:
        now = datetime.now().replace(second=0, microsecond=0)
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT rowid, user_id, text FROM tasks WHERE remind_at=?", (now.isoformat(),))
        tasks = cursor.fetchall()
        for rowid, user_id, text in tasks:
            try:
                await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
                cursor.execute("DELETE FROM tasks WHERE rowid=?", (rowid,))
            except:
                pass
        conn.commit()
        conn.close()
        await asyncio.sleep(30)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    init_db()
    loop = asyncio.get_event_loop()
    loop.create_task(check_reminders())
    executor.start_polling(dp, skip_updates=True)
